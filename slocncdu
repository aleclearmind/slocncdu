#!/usr/bin/env python3

import os
import argparse
import sys
import time

from path import Path
from pygount import SourceAnalysis
from dataclasses import dataclass
from typing import Dict, Union

verbose = False

def log(message):
    global verbose
    if verbose:
        sys.stderr.write(message + "\n")

@dataclass
class File:
    name: str
    size: int

    def as_dict(self):
        return {"name": self.name, "size": self.size}

    def as_ncdu(self):
        return {
            "name": self.name,
            "asize": self.size,
            "dsize": self.size
        }

@dataclass
class Directory:
    name: str
    entries: Dict[str, Union[File, "Directory"]]

    def record(self, path: Path, size):
        parts = path.parts()[1:]
        name = parts[0]
        rest = parts[1:]
        if len(parts) == 1:
            self.entries[name] = File(name=name, size=size)
        else:
            if name not in self.entries:
                self.entries[parts[0]] = Directory(name=name, entries={})
            self.entries[name].record(Path(os.path.join(*rest)), size)

    def as_dict(self):
        return {
            "name": self.name,
            "entries": {
                name: entry.as_dict()
                for name, entry
                in self.entries.items()
            }
        }

    def as_ncdu(self):
        return [
            {
                "name": self.name,
                "asize": 0,
                "dsize": 0
            }
        ] + [entry.as_ncdu() for entry in self.entries.values()]

def main():
    parser = argparse.ArgumentParser(description=".")
    parser.add_argument("--verbose", action="store_true", help="Emit log info.")
    args = parser.parse_args()

    global verbose
    verbose = args.verbose

    root = Directory(name="/", entries={})
    for source_path in sys.stdin:
        source_path = source_path.strip()
        log(f"Parsing {source_path}")
        size = SourceAnalysis.from_file(source_path, "revng").code_count
        root.record(Path(source_path), size)

    import json
    print(json.dumps([
        1,
        2,
        {
            "progname": "slocncdu",
            "progver": "1.0",
            "timestamp": int(time.time())
        },
        root.as_ncdu()
    ], indent=2))

    return 0

if __name__ == "__main__":
    sys.exit(main())
